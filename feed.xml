<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech Adventures in Business Central</title>
    <description>A Blog by Tine Starič</description>
    <link>https://tine.staric.net/</link>
    <atom:link href="https://tine.staric.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 05 Mar 2024 07:18:01 +0200</pubDate>
    <lastBuildDate>Tue, 05 Mar 2024 07:18:01 +0200</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>Reference Parameters - var does matter</title>
        <description>&lt;p&gt;I previously posted about &lt;a href=&quot;https://tine.staric.net/blog/2024/3-pitfalls-of-var-parameters/&quot;&gt;Pitfalls of var parameters&lt;/a&gt; and how things can go sideways if we’re not careful when using them.&lt;/p&gt;

&lt;p&gt;What I wrote there in regards to marking &lt;em&gt;reference&lt;/em&gt; parameters with var was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Var modifiers don’t make a difference, but you should still use them to signal the intentionality of your procedure. If the procedure intends to modify the parameter, add a var in front of it, if it’s only reading data, skip it.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, what I wrote there still holds, regardless of using var with a reference data type parameter we’re able to make changes to it and those changes are reflected outside our local procedure. But thanks to &lt;a href=&quot;https://www.linkedin.com/in/ajkauffmann&quot;&gt;Arend-Jan Kauffmann&lt;/a&gt; for pointing out, that that &lt;strong&gt;wasn’t the full truth&lt;/strong&gt;. Marking a reference parameter with a var or not &lt;strong&gt;actually does play a role&lt;/strong&gt;, and this post is about clarifying how and why it’s important we think about it in our &lt;strong&gt;event-driven world of extensions&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;tldr&quot;&gt;tl/dr&lt;/h3&gt;
&lt;p&gt;When we’re passing a reference type parameter to a procedure &lt;strong&gt;without var&lt;/strong&gt;, we’re passing the &lt;strong&gt;reference&lt;/strong&gt; by value. The procedure can make all the changes to the instance it points to, however, it &lt;strong&gt;cannot change the reference so it would point to a different instance&lt;/strong&gt;. When passing the parameter &lt;strong&gt;with var&lt;/strong&gt;, we can &lt;strong&gt;also change the reference&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Okay, now that that’s out of the way, let’s go through this again, but with an example or two, to make this a bit easier to understand.
Let’s take the same List example as last time. We know that &lt;strong&gt;both of these result in the same outcome&lt;/strong&gt;. In both cases, &lt;strong&gt;var or no var&lt;/strong&gt;, we end up with a list with &lt;strong&gt;2 items&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ref-param-list-add-no-var.png&quot; alt=&quot;Add to List - No var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ref-param-list-add-var.png&quot; alt=&quot;Add to List - var&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s make these examples weirder, so we can see where &lt;strong&gt;var&lt;/strong&gt; starts making a difference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ref-param-list-change-reference-no-var.png&quot; alt=&quot;Change List Reference - No var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What do you think the count is going to be here? &lt;em&gt;1? 2? 3?&lt;/em&gt; Well, let’s see…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ref-param-list-change-reference-no-var-count.png&quot; alt=&quot;Change List Reference - Count - No var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s one.&lt;/strong&gt; Before we explain again what’s happening, let’s take a look at the same example if the list parameter is marked with var:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ref-param-list-change-reference-var.png&quot; alt=&quot;Change List Reference - var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ref-param-list-change-reference-var-count.png&quot; alt=&quot;Change List Reference - Count - var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This time the result is more along the lines of what we’d expect. &lt;em&gt;So why this difference in behavior?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When passing a reference type, something like a list, we’re &lt;strong&gt;not passing an actual list&lt;/strong&gt;, but only a &lt;strong&gt;reference to that list&lt;/strong&gt;. &lt;em&gt;A pointer, a location.&lt;/em&gt; Similar to having a piece of paper where the address of a house is written on. When passing it to a procedure, you’re not passing the whole house, just this &lt;em&gt;piece of paper&lt;/em&gt; with the address. So when we’re talking about passing it by reference (with var) or by value (without var), we’re talking about passing the &lt;strong&gt;reference&lt;/strong&gt; by value or by reference. In our case, this piece of paper with the address. In both cases, someone can go to the house and &lt;strong&gt;put something in&lt;/strong&gt; the house, or &lt;strong&gt;take something out&lt;/strong&gt; of it. However, if we give them the address by value (without var), we’re saying, &lt;em&gt;you can find the house here, do what you want in the house, but you &lt;strong&gt;can’t change the address&lt;/strong&gt; on this paper.&lt;/em&gt; When we pass it by reference (with var), they can also &lt;strong&gt;change the address&lt;/strong&gt; so it points to a &lt;strong&gt;different house altogether&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And that’s what’s happening in our list example above. We got the &lt;em&gt;address&lt;/em&gt; to our List (MyList), but then we created a &lt;strong&gt;completely new list&lt;/strong&gt; (MyList2) and tried saying, &lt;em&gt;“Hey, MyList address should now point to this new list”&lt;/em&gt;. When the parameter is passed without var, we &lt;strong&gt;cannot do that&lt;/strong&gt;, hence, when the procedure finishes, MyList still &lt;strong&gt;points to the original List&lt;/strong&gt; with only 1 item (“Hello”).&lt;/p&gt;

&lt;p&gt;In the second example, because MyList is &lt;strong&gt;passed with var&lt;/strong&gt;, we can change it, so that it &lt;strong&gt;points to the new List&lt;/strong&gt;, MyList2.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;“Okay Tine, fine, I get it, but so what? I mean, who in their right mind goes and creates a new list, if they get one passed in as a parameter…”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, fair point. But keep in mind, that any procedure that &lt;strong&gt;returns a list&lt;/strong&gt; actually &lt;strong&gt;creates a new instance&lt;/strong&gt;. So it’s not that uncommon.&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;/images/ref-param-invoice-change-reference-no-var.png&quot; alt=&quot;Assign Invoices - No var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above example &lt;strong&gt;won’t work&lt;/strong&gt;, but it will if the parameter is marked with var:&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;/images/ref-param-invoice-change-reference-var.png&quot; alt=&quot;Assign Invoices - var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so will this:&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;/images/ref-param-invoice-add.png&quot; alt=&quot;Assign Invoices - var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Fine, be mindful of how you assign to lists. Why don’t I just &lt;strong&gt;always mark reference parameters with var&lt;/strong&gt;? One less thing to worry about…”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad idea.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Especially when you work with events. Let me give you an example with a reference type that will make it more obvious:&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;/images/ref-param-interface-main.png&quot; alt=&quot;Interface - Main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have a simple procedure that sets a value, exposes the interface through an event, and then gets the value. Let’s take a look at the interface implementation:&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;/images/ref-param-interface-normal.png&quot; alt=&quot;Interface Implementation - Normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Simple, right?&lt;/em&gt; One procedure sets the value, and the other reads it. So let’s turn our attention to the event over there. If we expose the interface &lt;strong&gt;by value&lt;/strong&gt;, subscribers can &lt;strong&gt;only access the procedures of that interface&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;/images/ref-param-interface-event-no-var.png&quot; alt=&quot;Interface Event - No var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, if you expose it &lt;strong&gt;by reference&lt;/strong&gt;, a subscriber can also &lt;strong&gt;change the implementation&lt;/strong&gt; that the interface is referencing:&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;/images/ref-param-interface-event-var.png&quot; alt=&quot;Interface Event - var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that can lead to &lt;strong&gt;unpredictable behavior&lt;/strong&gt; for your app, especially if the new implementation does something stupid like:&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;/images/ref-param-interface-wild.png&quot; alt=&quot;Interface Implementation - Wild&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But hey, maybe that’s exactly &lt;strong&gt;what you wanted&lt;/strong&gt;. The option for subscribers to &lt;strong&gt;change the implementation&lt;/strong&gt; interface points to. So there’s no &lt;em&gt;always right&lt;/em&gt; or &lt;em&gt;always wrong&lt;/em&gt; answer here.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now, in summary, &lt;em&gt;should you use var with reference parameters? or should you not?&lt;/em&gt; It comes down to the usual &lt;strong&gt;“It depends”&lt;/strong&gt;. What I’m hoping to achieve with this blog is for us to &lt;strong&gt;be mindful that there is a difference&lt;/strong&gt; and you should think about &lt;em&gt;“Do I want the procedure to only modify the instance of a variable, or should I let it change the reference to a completely different instance?”&lt;/em&gt; and that we don’t just &lt;strong&gt;blindly mark or not mark parameters with var&lt;/strong&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Feb 2024 10:00:00 +0200</pubDate>
        <link>https://tine.staric.net/blog/2024/reference-parameters-var-does-matter/</link>
        <guid isPermaLink="true">https://tine.staric.net/blog/2024/reference-parameters-var-does-matter/</guid>
        
        
        <category>al</category>
        
      </item>
    
      <item>
        <title>My MB-820 Experience and why you shouldn&apos;t worry (that much)</title>
        <description>&lt;p&gt;Last Friday I took the &lt;strong&gt;MB-820&lt;/strong&gt;. I wanted to do it as soon as possible. I guess I wanted to prove to myself that the years spent working as a developer were enough preparation to pass this certification.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did I pass? I don’t know.&lt;/em&gt; More on that later.&lt;/p&gt;

&lt;p&gt;But as I was sharing my experience with my colleagues who are planning to take it as well, I realized a lot of worries come from &lt;strong&gt;not knowing how the exam process works&lt;/strong&gt;. The point of this post is not to leak questions, I don’t think there’s a point in memorizing questions. It’s more about explaining the process, how you take the exam, what can you expect, and what style of questions can you expect.&lt;/p&gt;

&lt;p&gt;If you’ve taken any other MS exam, you’ll already know most of these things. But I believe for a lot of BC Developers, this will be the first certification they’ll attempt.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;remember&quot;&gt;Remember!&lt;/h3&gt;
&lt;p&gt;I’ll repeat this at the end, but my takeaway is, that an experienced developer, that worked on a wider set of projects &lt;strong&gt;should be able to pass this exam with a few days of preparation&lt;/strong&gt;. So go over some areas you’re uncertain about, and most importantly, &lt;strong&gt;trust yourself&lt;/strong&gt;. You’ve done most of the things they’re asking you about, now you just have to &lt;strong&gt;show it to them&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;exam-environment&quot;&gt;Exam Environment&lt;/h3&gt;

&lt;p&gt;You’ll take the exam through Pearson VUE. You can either take it &lt;strong&gt;in-person&lt;/strong&gt; or &lt;strong&gt;online&lt;/strong&gt;. I tried both. I took the MB-800 in person, and MB-820 online. The experience is more or less the same. The in-person option did make me less worried about anything going wrong during the exam, but Online allows much more flexibility around when you can take the exam.&lt;/p&gt;

&lt;p&gt;To take the exam online, you’ll download an app from their site and you’ll have to ensure that the room you’re in has no distracting factors (monitors and TVs need to be off, no books, anything that could be considered “cheating”). You’ll have to take pictures of the front, back, and sides of your exam area. Don’t worry, &lt;strong&gt;the app guides you through everything&lt;/strong&gt;. Additionally, your PC shouldn’t be running any additional apps. You can read more about it &lt;a href=&quot;https://learn.microsoft.com/en-us/credentials/certifications/online-exams&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;exam-style&quot;&gt;Exam Style&lt;/h3&gt;
&lt;p&gt;When you start the exam, you’ll have all the exam rules written out, take your time to read them, this doesn’t take away from your exam time yet. Once the actual exam starts, you’ll have &lt;strong&gt;2 hours to finish it&lt;/strong&gt;. My take was, that 2 hours is &lt;strong&gt;enough time&lt;/strong&gt;, to comfortably go through all questions and return to the ones I found iffy.&lt;/p&gt;

&lt;p&gt;The exam has &lt;strong&gt;3 sections of questions&lt;/strong&gt;. Within each section, you can always move back and forth between questions. So if you’re unsure about some, you can move forward to the next one, and return to it later. However, &lt;strong&gt;once you leave a section, you will not be able to return to it anymore&lt;/strong&gt;. The app lets you know of that, so don’t worry about accidentally leaving a section.&lt;/p&gt;

&lt;p&gt;In my case, the sections were split into 8/6/42 questions, but this might change, the exam is in Beta after all. The first two sections were more scenario-based. &lt;em&gt;“The customer calls in with this and that problem, what do you do?”&lt;/em&gt;. The last section was more “to the point”, you have a snippet of code, what you have to change, or what property you use for this and that purpose.&lt;/p&gt;

&lt;p&gt;Now you might think &lt;em&gt;“Ugh, are we really going to get questions that we could easily google?!”&lt;/em&gt;. Yes, yes we will.&lt;/p&gt;

&lt;p&gt;However, a hugely important detail that you have to keep in mind is, that since August last year, &lt;strong&gt;you can use MS Learn during all “role-based” exams!&lt;/strong&gt; You can read about it &lt;a href=&quot;https://techcommunity.microsoft.com/t5/microsoft-learn-blog/introducing-a-new-resource-for-all-role-based-microsoft/ba-p/3500870&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;you-can-use-ms-learn-during-the-exam&quot;&gt;You can use MS Learn during the exam!&lt;/h3&gt;
&lt;p&gt;How that works during the exam is, that you have a button at the bottom of the screen that says MS Learn. You click it, and it &lt;strong&gt;opens a web page side-by-side to your exam&lt;/strong&gt; and you can freely search through it while answering your questions. Keep in mind, that you won’t be able to leave the MS Learn website. So if documentation points to GitHub, that link won’t work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/microsoft-learn-1.png&quot; alt=&quot;MS Learn Button&quot; /&gt;
&lt;img src=&quot;/images/microsoft-learn-2.png&quot; alt=&quot;MS Learn side-by-side&quot; /&gt;
&lt;br /&gt;
&lt;em&gt;Screenshots are taken from MS Learn, not the actual exam&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So no need to memorize all available properties and triggers! &lt;em&gt;Yaaay!&lt;/em&gt; Thank you MS, now I’m more forgiving of »Googleable questions«. But if you’re like me, and you’ve always searched through MS Docs using Google, then take a minute to figure out how to search effectively using the Search option in Docs. That’s the only search option you’ll have. &lt;a href=&quot;https://twitter.com/KarolakNatalie&quot;&gt;Natalie&lt;/a&gt; has a good &lt;a href=&quot;https://nataliekarolak.wordpress.com/2023/09/05/bc-docs-search-vs-filter-by-title/&quot;&gt;post&lt;/a&gt; about searching docs effectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be careful though&lt;/strong&gt;. MS Learn is a great help, but it’s not a substitute for exam prep. If you try to find the answer to every question in MS Learn, you can easily &lt;strong&gt;run out of the 2 hours&lt;/strong&gt; allotted for the exam.&lt;/p&gt;

&lt;p&gt;I’ll add here, that when I tried to close the MS Learn window, my whole exam crashed. But you can always message your proctor, and they simply restarted my exam from the last question I attempted. I didn’t lose any time due to the crash. This is not to scare you into not using MS Learn, but to emphasize, that even if something goes wrong, &lt;strong&gt;don’t worry, proctors are there to help you.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;question-topics-and-types&quot;&gt;Question Topics and Types&lt;/h3&gt;

&lt;p&gt;The questions do cover a wide area of topics, &lt;strong&gt;from telemetry, KQL, AppSource submissions, and ContainerHelper, to actual AL objects, data types, and permission sets&lt;/strong&gt;. &lt;a href=&quot;https://www.linkedin.com/in/alberto-soben-a91090162/&quot;&gt;Alberto&lt;/a&gt;  did a brilliant job &lt;strong&gt;attaching various links for each topic&lt;/strong&gt; that MS specified can be included in the exam. You can find the full list &lt;strong&gt;&lt;a href=&quot;https://businesscentralgeek.com/business-central-developer-certification-ultimate-guide&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When I was preparing, I went through exam areas and marked all where I didn’t feel comfortable. I then followed the MS Learning Paths covering those areas. Every learning path ends with a &lt;strong&gt;»Check your knowledge«&lt;/strong&gt; which gives you a feeling of what kind of questions to expect from that area.&lt;/p&gt;

&lt;p&gt;The questions come in 5 types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Multiple choice with a single correct answer&lt;/li&gt;
  &lt;li&gt;Multiple choice with multiple correct answers&lt;/li&gt;
  &lt;li&gt;Snippet where you fill in the blanks from a selection&lt;/li&gt;
  &lt;li&gt;A selection of answers in the left column, and you have to select the correct answers and put them in order in the right column&lt;/li&gt;
  &lt;li&gt;A Yes/No question&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The exam always specifies how many answers are required. It will prevent you from selecting more answers than expected and it will notify you if you try to leave the question by selecting less than the required amount of answers. You can read more about different question types &lt;a href=&quot;https://learn.microsoft.com/en-us/credentials/support/exam-duration-exam-experience&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;review-later&quot;&gt;Review later&lt;/h3&gt;

&lt;p&gt;When you’re answering a question, you can mark it as »Review Later« and »Leave a Comment«. I suggest you use the Review Later one for any questions where you’re unsure about your answer. Once you get to the end of a section, you’ll get an overview of all answered, unanswered, marked as review, and marked as comment questions, and you can navigate quickly to the ones you’d like to take another look at.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mb820-review-qst.png&quot; alt=&quot;Mark Questions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mb820-review-screen.png&quot; alt=&quot;Review Screen&quot; /&gt;
&lt;br /&gt;
&lt;em&gt;Screenshots are taken from MS Learn, not the actual exam&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Especially for people taking the Beta exam, mark the questions you are confused about and &lt;strong&gt;leave a comment for Microsoft.&lt;/strong&gt; Sure, it won’t do much for you, but at least people who are coming after you might have a better exam-taking experience.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;the-results&quot;&gt;The results&lt;/h3&gt;

&lt;p&gt;For anyone reading this &lt;strong&gt;after the exam is live&lt;/strong&gt; (no longer in Beta), you will get your results &lt;strong&gt;immediately&lt;/strong&gt;, and you’ll see how well you did in each area (Describe Business Central; Install, develop, and deploy for BC; …). For anyone taking the &lt;strong&gt;Beta exam&lt;/strong&gt;, we’ll get our results &lt;strong&gt;within 10 days from the day the Certification goes live&lt;/strong&gt; (goes out of beta). We don’t have a date yet when that’s supposed to be, but since the Beta discounts are valid until the 21st of February, I expect the exam to be live &lt;strong&gt;somewhere in March&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;my-take-away&quot;&gt;My take away&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MS Learn&lt;/strong&gt; really does help so we’re not tripping over questions that are a &lt;strong&gt;quick search away&lt;/strong&gt;. There were questions about data types I haven’t used in years, like &lt;strong&gt;XMLPorts&lt;/strong&gt;, but I could find what I needed in the documentation. Does it mean there are no “stupid” questions left? No, I was quite annoyed with some, especially the &lt;strong&gt;KQL-related&lt;/strong&gt; ones. But I left my comments, hopefully, they’ll be improved in the future. Overall, the exam was quite enjoyable for me, and I think it does try to capture development knowledge for the most part. At least it’s a &lt;strong&gt;starting point&lt;/strong&gt; that will improve and we now have a &lt;strong&gt;developer certification available&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;And again, if you’ve been in the AL world for a while now, and you’ve worked on various projects, &lt;strong&gt;you got this&lt;/strong&gt;! 
Some preparation for areas you’re not too comfortable with, and you’re ready to go! &lt;strong&gt;Trust yourself&lt;/strong&gt;, you’ve done most of this before!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;For anyone reading this after taking the exam, have I missed anything? Is there something else, you wish you knew before taking it? Let me know, and I’ll add it. Help the next person get certified!&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Feb 2024 10:00:00 +0200</pubDate>
        <link>https://tine.staric.net/blog/2024/my-mb-820-experience/</link>
        <guid isPermaLink="true">https://tine.staric.net/blog/2024/my-mb-820-experience/</guid>
        
        
        <category>al</category>
        
      </item>
    
      <item>
        <title>3 Pitfalls of Var Parameters</title>
        <description>&lt;p&gt;I believe I don’t have to introduce the purpose of &lt;strong&gt;var&lt;/strong&gt; in procedure parameters too much. If the parameter has a var modifier, it’s passed &lt;strong&gt;by reference&lt;/strong&gt;, and any changes within the procedure will affect the variable that was passed into the procedure. If it doesn’t, it’s passed &lt;strong&gt;by value&lt;/strong&gt;, meaning that any changes will stay local to that procedure. However, that’s not always the case. There are a couple of edge cases when it comes to var parameters, and as I was about to write the explanation for our internal learning purposes anyway, I decided to use this as an opportunity to make a debut in the world of blogging.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;parameters-that-are-always-passed-by-reference&quot;&gt;Parameters that are always passed by reference&lt;/h3&gt;
&lt;p&gt;Recently I had a younger colleague struggle with passing a parameter to a function by reference. Now this wasn’t your average “you forgot a var somewhere in the signature”, but rather a List that was being passed in. The List parameter was not marked as var, yet &lt;strong&gt;all the changes applied within the procedure also affected the instance of a List outside the procedure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait what? How come?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, a list, unlike your ordinary texts, integers or Booleans is a &lt;strong&gt;reference type&lt;/strong&gt;, which means assigning it to a new variable or passing it to a method without var will create a separate variable that &lt;strong&gt;writes to the same list&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/var-param-list.png&quot; alt=&quot;List value assignment when passed without var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s actually quite well documented in the &lt;a href=&quot;https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/list/list-data-type&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/var-param-list-doc.png&quot; alt=&quot;List pass-by-reference documentation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But we’re so used to the distinction that a non-var parameter is passed by value and we can manipulate it however we like, while var parameters are passed by reference, and changes will have an effect outside of the procedure.&lt;/p&gt;

&lt;p&gt;And Lists are not alone, there are a couple of data types that are always passed &lt;strong&gt;by reference&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dictionary&lt;/li&gt;
  &lt;li&gt;JsonObject&lt;/li&gt;
  &lt;li&gt;JsonArray&lt;/li&gt;
  &lt;li&gt;JsonValue&lt;/li&gt;
  &lt;li&gt;JsonToken&lt;/li&gt;
  &lt;li&gt;OutStream&lt;/li&gt;
  &lt;li&gt;InStream&lt;/li&gt;
  &lt;li&gt;Codeunit&lt;/li&gt;
  &lt;li&gt;Interface&lt;/li&gt;
  &lt;li&gt;ErrorInfo&lt;/li&gt;
  &lt;li&gt;Notification&lt;/li&gt;
  &lt;li&gt;Query&lt;/li&gt;
  &lt;li&gt;TextBuilder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Be careful&lt;/strong&gt; with these data types, you might get them back in a different state when the procedure finishes. This is especially true for &lt;strong&gt;exposing them through events&lt;/strong&gt;, as we have no control if a subscriber can change the contents of the variable or not.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Var modifiers don’t make a difference, but you should still use them to &lt;strong&gt;signal the intentionality&lt;/strong&gt; of your procedure. If the procedure intends to modify the parameter, add a var in front of it, if it’s only reading data, skip it.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;This was actually not the full truth. Var &lt;strong&gt;does make a difference&lt;/strong&gt;, even with reference parameters. You can read more about it here: &lt;a href=&quot;/blog/2024/reference-parameters-var-matters&quot;&gt;Reference parameters - var does matter&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;temporary-records&quot;&gt;Temporary records&lt;/h3&gt;
&lt;p&gt;If we do an Insert on a normal record, we write to the database. If the table is temporary, the record is only stored in memory. &lt;em&gt;Easy enough&lt;/em&gt;. However, be careful when you’re creating methods that expect temporary records. As it turns out, if the parameter is a record that is passed by reference (has a var modifier), then &lt;strong&gt;the “temporary” modifier has no effect&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you have a procedure that takes in a Customer record by reference and is marked as temporary:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyProcedure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you pass a non-temporary Customer record in, the record will &lt;strong&gt;remain non-temporary&lt;/strong&gt;, and any record operations that MyProcedure is doing will actually make changes to the database.&lt;/p&gt;

&lt;p&gt;Here’s how the records behave:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/var-param-temp-all.png&quot; alt=&quot;IsTemporary behavior depending on var and temporary parameter modifiers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If your procedures are making any &lt;strong&gt;dangerous operations&lt;/strong&gt; on a pass-by-reference record, like &lt;strong&gt;DeleteAll&lt;/strong&gt;, I highly suggest adding an &lt;strong&gt;IsTemporary gatekeeper&lt;/strong&gt; at the beginning, either exiting or throwing a record if the record is not temporary.&lt;/p&gt;

&lt;p&gt;Again, even though the temporary modifier does not affect the execution, keep using it for &lt;strong&gt;signaling intentionality&lt;/strong&gt;. Are you expecting a temporary record? Mark the parameter as temporary.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;streams-and-blobs&quot;&gt;Streams and Blobs&lt;/h3&gt;
&lt;p&gt;Short fact, &lt;strong&gt;streams don’t hold data, blobs hold data&lt;/strong&gt;. So if you’re trying to read information with a stream from a blob that no longer exists (because it was de-allocated from memory), the stream won’t have anything to read from.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Okay, but what does that have to do with passing parameters around by reference?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, let’s take a look at this simple example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/var-param-stream-bad.png&quot; alt=&quot;Read from a local blob with InStream&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have a blob that holds» Hello World« text, and that’s what we should be able to read with an InStream. This is another example of &lt;em&gt;» This should work, why doesn’t this work?«&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And no, the answer is not &lt;em&gt;» because InStream is not passed by reference«&lt;/em&gt;. As per our first point, streams are &lt;strong&gt;always passed by reference.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Again, &lt;strong&gt;streams don’t hold data&lt;/strong&gt;. You can think of streams as straws we use to drink. If you try to drink from a full cup, well, that will work, you’ll drink. But now I’ll take your cup, throw it away, and ask you to take another sip. &lt;em&gt;You can’t, can you?&lt;/em&gt; And that’s exactly what’s happening in the above example.&lt;/p&gt;

&lt;p&gt;In the ImportFile procedure, we take our cup (Temp Blob), pour in a nice cold &lt;em&gt;Hello World&lt;/em&gt;, and put in the straw we got as a parameter. But now as the procedure finishes, the local variables from our procedure get &lt;strong&gt;de-allocated from memory&lt;/strong&gt;. As TempBlob is one of our local variables, we’re now effectively left without our cup, drawing air through our straw, feeling sad.&lt;/p&gt;

&lt;p&gt;These two options on the other hand will work just fine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/var-param-stream-global.png&quot; alt=&quot;Reading from a global blob with InStream&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/var-param-stream-param.png&quot; alt=&quot;Reading from a parameter blob with InStream&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This time, as TempBlob is &lt;strong&gt;not a local variable&lt;/strong&gt;, it doesn’t get de-allocated, and the InStream can successfully read data from it. So just keep in mind, that &lt;strong&gt;data source needs to still be available when you try to read from it&lt;/strong&gt; with an InStream, either as a global variable or by being passed as a parameter.&lt;/p&gt;

&lt;p&gt;Note: &lt;strong&gt;UploadIntoStream&lt;/strong&gt; works just fine, as the uploaded file is allocated outside of procedure scope:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/var-param-stream-upload.png&quot; alt=&quot;Read from UploadToInStream function with InStream&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Jan 2024 10:00:00 +0200</pubDate>
        <link>https://tine.staric.net/blog/2024/3-pitfalls-of-var-parameters/</link>
        <guid isPermaLink="true">https://tine.staric.net/blog/2024/3-pitfalls-of-var-parameters/</guid>
        
        
        <category>al</category>
        
      </item>
    
      <item>
        <title>A Blogging Journey Begins!</title>
        <description>&lt;p&gt;Finally! I have a blog!&lt;/p&gt;

&lt;p&gt;For the past few years, I’ve been wanting to have a place where I can share my ideas about Business Central tech. It took me a while, I know, but now I finally have it! I haven’t really done much writing in the past, so this will be an interesting journey for me, and hopefully for you as well.&lt;br /&gt;&lt;br /&gt;
The areas I want to explore and share with you are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The edges of AL, where AL patterns break, and where we need to go beyond the borders of BC.&lt;/li&gt;
  &lt;li&gt;Weird situations with AL that I come across, which I want to document for myself and the next poor soul that needs to deal with them.&lt;/li&gt;
  &lt;li&gt;Recaps of conference sessions I present, so that they are in a written and searchable format.&lt;/li&gt;
  &lt;li&gt;Recaps of BC conferences. I wish everyone could attend them, but for those who cannot, I want to share key takeaways, as the community findings are always intriguing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think this will be a fun activity for me, and hopefully sometimes insightful for you!&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Jun 2023 01:08:27 +0300</pubDate>
        <link>https://tine.staric.net/blog/2023/hello-world-of-blogging/</link>
        <guid isPermaLink="true">https://tine.staric.net/blog/2023/hello-world-of-blogging/</guid>
        
        
        <category>welcome</category>
        
      </item>
    
  </channel>
</rss>
